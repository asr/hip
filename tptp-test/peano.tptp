
fof(zero_is_nat,axiom,Nat(zero)).

fof(eq_refl,axiom,! [X] : (Nat(X) => (X = X))).

fof(eq_sym,axiom,! [X,Y] : ((Nat(X) & Nat(Y) & (X = Y)) => (Y = X))).

fof(eq_trans,axiom,! [X,Y,Z] : ((Nat(X) & Nat(Y) & Nat(Z) & (X = Y) & (Y = Z)) => (X = Z))).

fof(eq_closed_nat,axiom,! [X,Y] : ((Nat(X) & (X = Y)) => Nat(Y))).

fof(succ_is_nat,axiom,! [N] : (Nat(N) => Nat(s(N)))).

fof(zero_not_succ,axiom,! [N] : (Nat(N) => (~ (s(N) = zero)))).

fof(succ_injective,axiom,! [N,M] : ((Nat(N) & Nat(M) & (s(N) = s(M))) => (N = M))).

fof(addition_base,axiom,! [N] : (Nat(N) => (add(N,zero) = N))).

fof(addition_ind,axiom,! [N,M] : ((Nat(N) & Nat(M)) => (add(N,s(M)) = s(add(N,M))))).

fof(addition_cong,axiom,! [X1,X2,Y1,Y2] : (   (Nat(X1) & Nat(X2) & Nat(Y1) & Nat(Y2) & (X1 = X2) & (Y1 = Y2))
                                           => (add(X1,Y1) = add(X2,Y2)))).

# fof(one_nat,conjecture,Nat(s(zero))).
# fof(two_plus_two,conjecture,add(s(s(zero)),s(s(zero))) = s(s(s(s(zero))))).

fof(inst_induction_add_assoc,axiom,
        ( (! [X,Y] : ((Nat(X) & Nat(Y)) => (add(X,add(Y,zero)) = add(add(X,Y),zero))))
        & (! [X,Y,Z] : ((Nat(X) & Nat(Y) & Nat(Z) & (add(X,add(Y,Z)) = add(add(X,Y),Z)))
                                                 => (add(X,add(Y,s(Z))) = add(add(X,Y),s(Z))))))
        => (! [X,Y,Z] : ((Nat(X) & Nat(Y) & Nat(Z)) => (add(X,add(Y,Z)) = add(add(X,Y),Z))))).
      
fof(add_associative,conjecture,! [X,Y,Z] : ((Nat(X) & Nat(Y) & Nat(Z)) => (add(X,add(Y,Z)) = add(add(X,Y),Z)))).
