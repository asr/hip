#+TITLE:     Proving Equational Haskell Properties Using Automated Theorem Provers
#+AUTHOR:    Dan Ros√©n
#+EMAIL:     danr@student.gu.se
#+LANGUAGE:  en
#+OPTIONS:   H:3 num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+LATEX_CLASS: beamer
#+LATEX_HEADER: \usepackage{palatino,inconsolata,amsmath,array}
#+LaTeX_CLASS_OPTIONS: [serif,professionalfont]

#+BEGIN_LATEX
\makeatletter
\newcommand*{\rom}[1]{\text{\footnotesize\expandafter\@slowromancap\romannumeral #1@.}}
\newcommand*{\romnodot}[1]{\text{\footnotesize\expandafter\@slowromancap\romannumeral #1@}}
\makeatother

%\newcommand\note[1]{\mbox{}\marginpar{\footnotesize\raggedright\hspace{0pt}\emph{#1}}}
\newcommand\note[1]{}
\newcommand\PA{\mathcal{P\!A}}
\newcommand\hs[1]{\verb~#1~}
\newcommand\ts[1]{\verb~#1~}
\newcommand\fn[1]{\mathrm{#1}}
%\newcommand\fn[1]{#1}
\newcommand\ptr[1]{\fn{\operatorname{#1-ptr}}}
\newcommand\appfn{@}
\newcommand\app[2]{#1 \, \appfn \, #2}
\newcommand\ex[1]{\exists \, #1 \, . \,}
\newcommand\nexxx[3]{\nexists \, #1 , #2 , #3 . \,}
\newcommand\fa[1]{\forall \, #1 . \,}
\newcommand\faa[2]{\forall \, #1 , #2 . \,}
\newcommand\faaa[3]{\forall \, #1 , #2 , #3 . \,}
\newcommand\faaaaaa[6]{\forall \, #1 , #2 , #3 , #4 , #5 , #6 . \,}

\newcommand{\HRule}{\rule{\linewidth}{0.5mm}}%\usetikzlibrary {\trees,positioning,arrows}

\newcommand\tofix[1]{#1^{\bullet}}
\newcommand\unfix[1]{#1^{\circ}}

\newcommand\append[0]{\texttt{\small{++}}}

\newcommand{\xsys}[2]{#1 \, xs \, #2 & = #1 \, ys #2}
\newcommand{\desca}[1]{  & \hspace{44.5mm}                            \{ \text{#1} \}}
\newcommand{\descra}[1]{ & \hspace{35mm} \Rightarrow     \hspace{4mm} \{ \text{#1} \}}
\newcommand{\descla}[1]{ & \hspace{35mm} \Leftarrow      \hspace{4mm} \{ \text{#1} \}}
\newcommand{\desclra}[1]{& \hspace{35mm} \Leftrightarrow \hspace{4mm} \{ \text{#1} \}}

\newcommand\lub[1]{\sqcup_{#1}}

\newcommand\defof[1]{definition of #1}

\newcommand\w[0]{\,\,}
\newcommand\eq[0]{ = }

\newcommand{\defBNF}[4] {\text{#1}\quad&#2&::=&\;#3&\text{#4}}
\newcommand{\defaltBNF}[2] {&&|&\;#1&\text{#2}}

\newcommand{\hstup}[2]{\hs{(} #1 \hs{,} #2 \hs{)}}

\newcommand{\nsqsubseteq}{\,\,\, /\!\!\!\!\!\!\sqsubseteq}

\newcommand{\bind}[2]{\fn{bind}(#1,#2)}
\newcommand{\fork}[2]{\fn{fork}(#1,#2)}
\newcommand{\forkr}[1]{\fn{right}(#1)}
\newcommand{\forkl}[1]{\fn{left}(#1)}
\newcommand{\leaf}[1]{\fn{leaf}(#1)}
\newcommand{\unleaf}[1]{\fn{unleaf}(#1)}

\newcommand\Inf{\fn{Inf}}
\newcommand\Total{\fn{Total}}
\newcommand\Fin{\fn{Fin}}

#+END_LATEX

* Behind the Scenes

** Translation to first order logic

** Instantiating provers with different induction techniques

** Running automated theorem provers

* Translation of bind

\begin{verbatim}
bind (Fork u v) f = Fork (bind u f) (bind v f)
bind (Leaf x)   f = f x
\end{verbatim}

#+BEGIN_LATEX
\begin{align*}
\rom{1} && \faaa{u}{v}{f} & \bind{\fork{u}{v}}{f} = \fork{\bind{u}{f}}{\bind{v}{f}} \\
\rom{2} && \faa{x}{f}     & \bind{\leaf{x}}{f}    = \app{f}{x} \\
\rom{3} && \faa{t}{f}     & t \neq \fork{\forkl{t}}{\forkr{t}} \wedge t \neq\leaf{\unleaf{t}} \\
        &&                & \rightarrow \bind{t}{f} = \bot
\end{align*}
#+END_LATEX

\pause

#+BEGIN_LATEX
\begin{align*}
\rom{1} && \faa{l}{r} & \forkl{\fork{l}{r}} = l \\
\rom{2} && \faa{l}{r} & \forkr{\fork{l}{r}} = r \\
\rom{3} && \fa{x}     & \unleaf{\leaf{x}} = x
\end{align*}
#+END_LATEX

* Function pointers

\begin{center}
$\rom{2} \quad \faa{x}{f} \bind{\leaf{x}}{f} = \app{f}{x}$

\vspace{2\baselineskip}

$\fa{x} \app{\ptr{return}}{x} = \fn{return}(x)$
\end{center}

* Supported Techniques

** Structural Induction

\begin{verbatim}
prop_return_right :: Tree a -> Prop (Tree a)
prop_return_right t = t >>= return =:= t
\end{verbatim}


\pause

** Approximation Lemma

\begin{verbatim}
prop_return_left :: (a -> Tree b) -> a -> Prop (Tree b)
prop_return_left f x = return x >>= f =:= f x
\end{verbatim}

\pause

** Fixed Point Induction

\footnotesize{
\begin{verbatim}
prop_assoc :: Tree a -> (a -> Tree b) -> (b -> Tree c) -> Prop (Tree c)
prop_assoc t f g = (t >>= f) >>= g =:= t >>= (\x -> f x >>= g)
\end{verbatim}
}

* Results

#+BEGIN_LATEX
\begin{tabular}{ >{\small}r@{/}>{\small}l | >{\small}r@{/}>{\small}l | >{\small}r@{/}>{\small}l | >{\small}r@{/}>{\small}l | >{\small}r@{/}>{\small}l || >{\small}r@{/}>{\small}l }
\multicolumn{2}{>{\small}l|}{Theorem} & \multicolumn{2}{>{\small}l|}{plain} & \multicolumn{2}{>{\small}l|}{induction} & \multicolumn{2}{>{\small}l|}{approx} & \multicolumn{2}{>{\small}l||}{fixpoint} & \multicolumn{2}{>{\small}l}{Finite Thm.}  \\
214&540 & 74&214 & 124&214 & 145&214 & 26&214 & 111&540 \\
\end{tabular}

#+END_LATEX


* Future Work: Lemma system - Totality

\centering
\hs{data Nat = Succ Nat | Zero}

\vspace{\baselineskip}

#+BEGIN_LATEX
\begin{align*}
\rom{1} &&        & \neg \, \Total(\bot) \\
\rom{2} &&        & \Total(\fn{zero}) \\
\rom{3} && \fa{x} & \Total(x) \rightarrow \Total(\fn{succ}(x))
\end{align*}
#+END_LATEX

\pause

\begin{equation*}
\faa{x}{y} \Total(x) \wedge \Total(y) \rightarrow x + y = y + x
\end{equation*}

* Future Work: Lemma system - Finiteness

\begin{center}
$\fa{xs} \Fin(xs) \rightarrow \fn{reverse}(\fn{reverse}(xs)) = xs$
\end{center}

* Future Work: Lemma system - Infiniteness

\begin{center}
$\fa{x} \Inf(x) \leftrightarrow (x = \fn{succ}(x))$
\end{center}

\vspace{1\baselineskip}

\pause

\begin{center}
$\Fin(x) \leftrightarrow \Total(x) \wedge \neg \Inf(x)$
\end{center}

\pause

\begin{align*}
\rom{1} && \faa{x}{y} & \Fin(x) \wedge \Fin(y)                  & \leftrightarrow &&& \Fin(x + y) \\
\rom{2} && \faa{x}{y} & \Inf(x) \vee (\Fin(x) \wedge \Inf(y)) & \leftrightarrow &&& \Inf(x + y)
\end{align*}


* Future Work: GHC Core
** Mimic GHC Semantics
** Type classes and desugaring for free
* Future Work: Lemma synthesis by QuickSpec

\begin{verbatim}
Universe has 867 terms.
== definitions ==
1: suc x := x+suc zero
== equations ==
1: y+x == x+y
2: y*x == x*y
3: x+zero == x
4: x*zero == zero
5: y+(x+z) == x+(y+z)
6: y*(x*z) == x*(y*z)
7: x+suc y == suc (x+y)
8: x*suc y == x+(x*y)
9: (x*y)+(x*z) == x*(y+z)
\end{verbatim}

* Name Contest!

** auhapp - AUtomated HAskell Property Prover

** gluppe - GLUppe Proves Properties Equationally

** glapp - GLapp Automatically Proves Properties

** herp - Haskell Equational Reasoning Prover





* Dictionary passing

\begin{verbatim}
class Monoid a where
  mappend :: a -> a -> a
  mempty  :: a

mconcat :: Monoid a => [a] -> a
mconcat = foldr mappend mempty
\end{verbatim}

\pause

$\Rightarrow$

\begin{verbatim}
data Monoid a = Monoid { mappend :: a -> a -> a
                       , mempty  :: a }

mconcat :: Monoid a -> [a] -> a
mconcat m = foldr (mappend m) (mempty m)
\end{verbatim}
